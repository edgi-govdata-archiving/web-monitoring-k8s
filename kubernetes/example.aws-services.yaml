---
# EXAMPLE AWS SERVICES CONFIGURATION
# Most of our deployments contain secret values that can be separated into a
# special secrets file. Unfortunately, services don't support that. Since some
# of our services also contain sensitive data, we keep them in a separate,
# secure repository. This file serves as an example of them.

# This configuration provides an `rds` service that gives deployments in the
# cluster access to an RDS database.
apiVersion: v1
kind: Service
metadata:
  name: rds
  namespace: example
spec:
  type: ExternalName
  externalName: postgres.db.server.example.com
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
---
# This configuration creates the `api` service that lets external clients talk
# to the web-monitoring-db deployments.
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: example
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: https
spec:
  selector:
    app: api
  ports:
  - name: https
    port: 443
    targetPort: 3000
  - name: http
    port: 80
    targetPort: 3000
  type: LoadBalancer
---
# This configuration creates the `api` service that lets external clients talk
# to the web-monitoring-ui deployments.
apiVersion: v1
kind: Service
metadata:
  name: ui
  namespace: example
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: https
spec:
  selector:
    app: ui
  ports:
  - name: https
    port: 443
    targetPort: 3001
  - name: http
    port: 80
    targetPort: 3001
  type: LoadBalancer
